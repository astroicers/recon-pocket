apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: recon-pocket-v1-
spec:
  entrypoint: recon-pocket
  arguments:
    parameters:
      - name: target
        value: ["Whois-Info", "Subdomain"]
      - name: domain
        value: "blueteam.pw"
  templates:
    # Main Flow
    - name: recon-pocket
      dag:
        target: "{{workflow.parameters.target}}"
        tasks:
          - name: Whois-Info
            template: whois-info-section
            arguments:
              parameters:
                - name: domain
                  value: "{{workflow.parameters.domain}}"
          - name: Subdomain
            template: subdomain-section
            arguments:
              parameters:
                - name: domain
                  value: "{{workflow.parameters.domain}}"
          - name: Live-Subdomain
            depends: Subdomain
            template: live-subdomain-script
            arguments:
              parameters:
                - name: subdomain
                  value: "{{tasks.Subdomain.outputs.parameters.subdomain}}"
          - name: Service-Info
            depends: Live-Subdomain
            template: service-info-section
            arguments:
              parameters:
                - name: live-subdomain
                  value: "{{item}}"
            withParam: "{{tasks.Live-Subdomain.outputs.parameters.live-subdomain-alive-script-output}}"
    # Section Flow
    - name: whois-info-section
      inputs:
        parameters:
          - name: domain
      steps:
        - - name: whois
            template: whois-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
    - name: subdomain-section
      inputs:
        parameters:
          - name: domain
      outputs:
        parameters:
          - name: subdomain
            valueFrom: 
              parameter: "{{steps.subdomain-merge.outputs.parameters.subdomain-script-output}}"
      steps:
        - - name: subfinder
            template: subfinder-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
          - name: assetfinder
            template: assetfinder-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
        - - name: subdomain-merge
            template: subdomain-script
            arguments:
              parameters:
                - name: subfinder-subdomain
                  value: "{{steps.subfinder.outputs.parameters.subfinder-output}}"
                - name: assetfinder-subdomain
                  value: "{{steps.assetfinder.outputs.parameters.assetfinder-output}}"
    - name: service-info-section
      inputs:
        parameters:
          - name: live-subdomain
      steps:
        - - name: nmap
            template: nmap-container
            arguments:
              parameters:
                - name: live-subdomain
                  value: "{{inputs.parameters.live-subdomain}}"
        - - name: http-port
            template: http-port-script
            arguments:
              parameters:
                - name: live-subdomain
                  value: "{{inputs.parameters.live-subdomain}}"
                - name: nmap-json
                  value: "{{steps.nmap.outputs.parameters.nmap-output}}"
          - name: https-port
            template: https-port-script
            arguments:
              parameters:
                - name: live-subdomain
                  value: "{{inputs.parameters.live-subdomain}}"
                - name: nmap-json
                  value: "{{steps.nmap.outputs.parameters.nmap-output}}"
    # Container List
    - name: whois-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/whois:latest
        command: ["/bin/sh","-c"]
        args: ["whois {{inputs.parameters.domain}} > /tmp/whois.txt"]
      outputs:
        parameters:
        - name: whois-output
          valueFrom:
            path: /tmp/whois.txt
    - name: subfinder-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/subfinder:latest
        command: ["/bin/sh","-c"]
        args: ["subfinder -silent -d {{inputs.parameters.domain}} > /tmp/subfinder.txt"]
      outputs:
        parameters:
        - name: subfinder-output
          valueFrom:
            path: /tmp/subfinder.txt
    - name: assetfinder-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/assetfinder:latest
        command: ["/bin/sh","-c"]
        args: ["assetfinder -subs-only {{inputs.parameters.domain}} > /tmp/assetfinder.txt"]
      outputs:
        parameters:
        - name: assetfinder-output
          valueFrom:
            path: /tmp/assetfinder.txt
    - name: nmap-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: live-subdomain
      container:
        image: astroicers/nmap:latest
        command: ["/bin/sh","-c"]
        args: ["nmap -vv --reason -Pn -T4 -sV -sC --version-all -A --osscan-guess -oN /tmp/nmap.txt -oX /tmp/nmap.xml {{inputs.parameters.live-subdomain}} && python xml2json.py"]
      outputs:
        parameters:
        - name: nmap-output
          valueFrom:
            path: /tmp/nmap.json
    - name: wappalyzer
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: url
      container:
        image: astroicers/wappalyzer:latest
        command: ["/bin/sh", "-c"]
        args: ["wappalyzer {{inputs.parameters.url}} > /tmp/wappalyzer.json"]
      outputs:
        parameters:
        - name: wappalyzer-output
          valueFrom:
            path: /tmp/wappalyzer.json
    # Script List
    - name: print-script
      inputs:
        parameters:
          - name: message
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          print("""{{inputs.parameters.message}}""")
    - name: subdomain-script
      inputs:
        parameters:
          - name: subfinder-subdomain
          - name: assetfinder-subdomain
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          subfinder = """{{inputs.parameters.subfinder-subdomain}}"""
          assetfinder = """{{inputs.parameters.assetfinder-subdomain}}"""
          result = subfinder.split("\n")
          result += assetfinder.split("\n")
          result = list(set(result))
          print(result)
          with open("/tmp/subdomain.txt", "w") as f:
            for i in result:
              f.write(i + "\n")
      outputs:
        parameters:
          - name: subdomain-script-output
            valueFrom:
              path: /tmp/subdomain.txt
    - name: live-subdomain-script
      inputs:
        parameters:
          - name: subdomain
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          import socket
          import json
          subdomain = """{{inputs.parameters.subdomain}}"""
          subdomain_list = subdomain.split("\n")
          def is_alive(hostname):
            try:
              socket.getaddrinfo(hostname, None)
              return True
            except socket.gaierror:
              return False
          alive_list = []
          not_alive_list = []
          for subdomain in subdomain_list:
            if is_alive(subdomain):
              alive_list.append(subdomain)
              print("%s is alive." % subdomain)
            else:
              not_alive_list.append(subdomain)
              print("%s is not alive." % subdomain)
          alive_json = json.dumps(alive_list)
          not_alive_json = json.dumps(not_alive_list)
          with open("/tmp/subdomain_alive.txt", "w") as f:
            f.write(alive_json)
          with open("/tmp/subdomain_not_alive.txt", "w") as f:
            f.write(not_alive_json)
      outputs:
        parameters:
          - name: live-subdomain-alive-script-output
            valueFrom:
              path: /tmp/subdomain_alive.txt
          - name: live-subdomain-not-alive-script-output
            valueFrom:
              path: /tmp/subdomain_not_alive.txt
    - name: http-port-script
      inputs:
        parameters:
          - name: live-subdomain
          - name: nmap-json
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          import json
          data = json.loads("""{{inputs.parameters.nmap-json}}""")
          print(data)
          ports = []
          hostname = """{{inputs.parameters.live-subdomain}}"""
          num = len(data["nmaprun"]["host"]["ports"]["port"])
          try:
            for i in range(num):
              if "service" in data["nmaprun"]["host"]["ports"]["port"][i]:
                if data["nmaprun"]["host"]["ports"]["port"][i]["service"]["@name"] == "http":
                  ports.append(data["nmaprun"]["host"]["ports"]["port"][i]["@portid"])
          except:
            if len(ports) != 0:
              exit(2)
            if data["nmaprun"]["host"]["ports"]["port"]["service"]["@name"] == "http":
              ports.append(data["nmaprun"]["host"]["ports"]["port"]["@portid"])
          result = {}
          result["hostname"] = hostname
          result["port"] = ports
          with open("/tmp/ports.txt", "w") as f:
            f.write(json.dumps(result))
      outputs:
        parameters:
          - name: http-port-script-output
            valueFrom:
              path: /tmp/ports.txt
    - name: https-port-script
      inputs:
        parameters:
          - name: live-subdomain
          - name: nmap-json
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          import json
          data = json.loads("""{{inputs.parameters.nmap-json}}""")
          print(data)
          ports = []
          hostname = """{{inputs.parameters.live-subdomain}}"""
          num = len(data["nmaprun"]["host"]["ports"]["port"])
          try:
            for i in range(num):
              if "service" in data["nmaprun"]["host"]["ports"]["port"][i]:
                if data["nmaprun"]["host"]["ports"]["port"][i]["service"]["@name"] == "https":
                  ports.append(data["nmaprun"]["host"]["ports"]["port"][i]["@portid"])
          except:
            if len(ports) != 0:
              exit(2)
            if data["nmaprun"]["host"]["ports"]["port"]["service"]["@name"] == "https":
              ports.append(data["nmaprun"]["host"]["ports"]["port"]["@portid"])
          result = {}
          result["hostname"] = hostname
          result["port"] = ports
          with open("/tmp/ports.txt", "w") as f:
            f.write(json.dumps(result))
      outputs:
        parameters:
          - name: https-port-script-output
            valueFrom:
              path: /tmp/ports.txt