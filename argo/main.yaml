apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: recon-pocket-v1-
spec:
  entrypoint: recon-pocket
  arguments:
    parameters:
      - name: target
        value: ["Whois-Info", "Subdomain"]
      - name: domain
        value: "blueteam.pw"
  templates:
    # Main Flow
    - name: recon-pocket
      dag:
        target: "{{workflow.parameters.target}}"
        tasks:
          - name: Whois-Info
            template: whois-info-section
            arguments:
              parameters:
                - name: domain
                  value: "{{workflow.parameters.domain}}"
          - name: Subdomain
            template: subdomain-section
            arguments:
              parameters:
                - name: domain
                  value: "{{workflow.parameters.domain}}"
          - name: Live-Subdomain
            depends: Subdomain
            template: live-subdomain-script
            arguments:
              parameters:
                - name: subdomain
                  value: "{{tasks.Subdomain.outputs.parameters.subdomain}}"
    # Section Flow
    - name: whois-info-section
      inputs:
        parameters:
          - name: domain
      steps:
        - - name: whois
            template: whois-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
        - - name: print
            template: print-script
            arguments:
              parameters:
                - name: message
                  value: "{{steps.whois.outputs.parameters.whois-output}}"
    - name: subdomain-section
      inputs:
        parameters:
          - name: domain
      outputs:
        parameters:
          - name: subdomain
            valueFrom: 
              parameter: "{{steps.subdomain.outputs.parameters.subdomain-script-output}}"
      steps:
        - - name: subfinder
            template: subfinder-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
          - name: assetfinder
            template: assetfinder-container
            arguments:
              parameters:
                - name: domain
                  value: "{{inputs.parameters.domain}}"
        - - name: subdomain
            template: subdomain-script
            arguments:
              parameters:
                - name: subfinder-subdomain
                  value: "{{steps.subfinder.outputs.parameters.subfinder-output}}"
                - name: assetfinder-subdomain
                  value: "{{steps.assetfinder.outputs.parameters.assetfinder-output}}"
    # Container List
    - name: whois-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/whois:latest
        command: ["/bin/sh","-c"]
        args: ["whois {{inputs.parameters.domain}} > /tmp/whois.txt"]
      outputs:
        parameters:
        - name: whois-output
          valueFrom:
            path: /tmp/whois.txt
    - name: subfinder-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/subfinder:latest
        command: ["/bin/sh","-c"]
        args: ["subfinder -silent -d {{inputs.parameters.domain}} > /tmp/subfinder.txt"]
      outputs:
        parameters:
        - name: subfinder-output
          valueFrom:
            path: /tmp/subfinder.txt
    - name: assetfinder-container
      retryStrategy:
        limit: "2"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: domain
      container:
        image: astroicers/assetfinder:latest
        command: ["/bin/sh","-c"]
        args: ["assetfinder -subs-only {{inputs.parameters.domain}} > /tmp/assetfinder.txt"]
      outputs:
        parameters:
        - name: assetfinder-output
          valueFrom:
            path: /tmp/assetfinder.txt
    # Script List
    - name: print-script
      inputs:
        parameters:
          - name: message
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          print("""{{inputs.parameters.message}}""")
    - name: subdomain-script
      inputs:
        parameters:
          - name: subfinder-subdomain
          - name: assetfinder-subdomain
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          subfinder = """{{inputs.parameters.subfinder-subdomain}}"""
          assetfinder = """{{inputs.parameters.assetfinder-subdomain}}"""
          result = subfinder.split("\n")
          result += assetfinder.split("\n")
          result = list(set(result))
          print(result)
          with open("/tmp/subdomain.txt", "w") as f:
            for i in result:
              f.write(i + "\n")
      outputs:
        parameters:
          - name: subdomain-script-output
            valueFrom:
              path: /tmp/subdomain.txt
    - name: live-subdomain-script
      inputs:
        parameters:
          - name: subdomain
      script:
        image: python:3.9-alpine
        command: ["python"]
        source: |
          import socket
          subdomain = """{{inputs.parameters.subdomain}}"""
          subdomain_list = subdomain.split("\n")
          def is_alive(hostname):
            try:
              socket.getaddrinfo(hostname, None)
              return True
            except socket.gaierror:
              return False
          alive_list = []
          not_alive_list = []
          for subdomain in subdomain_list:
            if is_alive(subdomain):
              alive_list.append(subdomain)
              print("%s is alive." % subdomain)
            else:
              not_alive_list.append(subdomain)
              print("%s is not alive." % subdomain)
          with open("/tmp/subdomain_alive.txt", "w") as f:
            f.write(str(alive_list))
          with open("/tmp/subdomain_not_alive.txt", "w") as f:
            f.write(str(not_alive_list))
      outputs:
        parameters:
          - name: live-subdomain-alive-script-output
            valueFrom:
              path: /tmp/subdomain_alive.txt
          - name: live-subdomain-not-alive-script-output
            valueFrom:
              path: /tmp/subdomain_not_alive.txt